xlab("Weight") +
ggtitle("Fig.2 Scatter Plot of MPG vs. Weight by Transmission")
theme_set(theme_gray(base_size = 14), plot.title = element_text(size=16, face="bold", vjust=2))
theme_set(theme_gray(base_size = 14),element_text(size=16, face="bold", vjust=2))
theme_set(theme_gray(base_size = 14))
ggplot(mtcars, aes(wt, mpg, group=am, colour=am ,height=4 , width=4)) +
geom_point() +
scale_colour_discrete(labels=c("0"="Automatic",
"1"="Manual")) +
xlab("Weight") +
ggtitle("Fig.2 Scatter Plot of MPG vs. Weight by Transmission", vjust=2)
theme_set(theme_gray(base_size = 14))
ggplot(mtcars, aes(am, mpg, fill=am)) +
geom_boxplot() +
scale_x_discrete(labels=c("0"="Automatic",
"1"="Manual")) +
guides(fill=FALSE) +
ggtitle("Fig.1 Boxplot of MPG vs. Transmission")
```
Manual transmission seems to have more miles per gallon than automatic transmission.
theme_set(theme_gray(base_size = 14))
ggplot(mtcars, aes(am, mpg, fill=am)) +
geom_boxplot() +
scale_x_discrete(labels=c("0"="Automatic",
"1"="Manual")) +
guides(fill=FALSE) +
ggtitle("Fig.1 Boxplot of MPG vs. Transmission")
fit <- lm(mpg~am, data = mtcars)
summary <- summary(fit)
intercept <- summary$coef[1]
slope <- summary$coef[2]
sigma <- summary$sigma
rsquared <- summary$r.squared
p_value <- summary$coef[2,4]
summary$coef
fit <- lm(mpg ~ am, data = mtcars)
summary <- summary(fit)
intercept <- summary$coef[1]
slope <- summary$coef[2]
sigma <- summary$sigma
rsquared <- summary$r.squared
p_value <- summary$coef[2,4]
summary$coef
library(reshape)
library(ggthemes)
install.packages("ggthemes")
library(reshape)
library(reshape2)
library(ggthemes)
data(mtcars)
df <- with(mtcars, data.frame(mpg, cyl, disp, hp, wt, gear))
cor_matrix <- round(cor(dat, use = "pairwise.complete.obs", method = "spearman"), digits = 2)
cor_matrix <- round(cor(df, use = "pairwise.complete.obs", method = "spearman"), digits = 2)
cor_dat <- melt(cor_matrix)
cor_dat <- cor_dat[-which(is.na(cor_dat[, 3])),]
cor_dat <- data.frame(cor_dat)
levels(cor_dat$X1) <- list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear")
levels(cor_dat$X2) <- rev(list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear"))
theme_set(theme_solarized())
ggplot(cor.dat, aes(X2, X1, fill = value)) +
geom_tile() +
geom_text(aes(X2, X1, label = value), color = "#073642", size = 4) +
scale_fill_gradient(name=expression("Spearman" * ~ rho), low = "#fdf6e3", high = "steelblue",
breaks=seq(0, 1, by = 0.2), limits = c(0.3, 1)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5))
ggplot(cor_dat, aes(X2, X1, fill = value)) +
geom_tile() +
geom_text(aes(X2, X1, label = value), color = "#073642", size = 4) +
scale_fill_gradient(name=expression("Spearman" * ~ rho), low = "#fdf6e3", high = "steelblue",
breaks=seq(0, 1, by = 0.2), limits = c(0.3, 1)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5))
data(mtcars)
df <- with(mtcars, data.frame(mpg, cyl, disp, hp, wt, gear))
cor_matrix <- round(cor(df, use = "pairwise.complete.obs", method = "spearman"), digits = 2)
cor_dat <- melt(cor_matrix)
cor_dat <- cor_dat[-which(is.na(cor_dat[, 3])),]
cor_dat <- data.frame(cor_dat)
cor_dat
data(mtcars)
df <- with(mtcars, data.frame(mpg, cyl, disp, hp, wt, gear))
cor_matrix <- round(cor(df, use = "pairwise.complete.obs", method = "spearman"), digits = 2)
cor_dat <- melt(cor_matrix)
cor_dat
cor_dat <- melt(cor_matrix)
cor_dat <- data.frame(cor_dat)
levels(cor_dat$X1) <- list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear")
levels(cor_dat$X2) <- rev(list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear"))
theme_set(theme_solarized())
ggplot(cor_dat, aes(X2, X1, fill = value)) +
geom_tile() +
geom_text(aes(X2, X1, label = value), color = "#073642", size = 4) +
scale_fill_gradient(name=expression("Spearman" * ~ rho), low = "#fdf6e3", high = "steelblue",
breaks=seq(0, 1, by = 0.2), limits = c(0.3, 1)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5))
mtcars
data(mtcars)
df <- with(mtcars, data.frame(mpg, cyl, disp, hp, wt, gear))
cor_matrix <- round(cor(df, use = "pairwise.complete.obs", method = "spearman"), digits = 2)
cor_dat <- melt(cor_matrix)
cor_dat <- data.frame(cor_dat)
levels(cor_dat$Var1) <- list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear")
levels(cor_dat$Var2) <- rev(list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear"))
theme_set(theme_solarized())
ggplot(cor_dat, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "#073642", size = 4) +
scale_fill_gradient(name=expression("Spearman" * ~ rho), low = "#fdf6e3", high = "steelblue",
breaks=seq(0, 1, by = 0.2), limits = c(0.3, 1)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5))
theme_set(theme_gray(base_size = 14))
ggplot(mtcars, aes(wt, mpg, group=am, colour=am ,height=4 , width=4)) +
geom_point() +
scale_colour_discrete(labels=c("0"="Automatic",
"1"="Manual")) +
xlab("Weight") +
theme(plot.title = element_text(size=16, face="bold", vjust=2)) +
ggtitle("Fig.2 Scatter Plot of MPG vs. Weight by Transmission")
```
ggplot(cor_dat, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "#073642", size = 4) +
scale_fill_gradient(name=expression("Spearman" * ~ rho), low = "#fdf6e3", high = "steelblue",
breaks=seq(0, 1, by = 0.2), limits = c(0.3, 1)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5))
library(reshape2)
library(ggthemes)
red=rgb(1,0,0); green=rgb(0,1,0); blue=rgb(0,0,1); white=rgb(1,1,1)
RtoWrange<-colorRampPalette(c(red, white))
WtoGrange<-colorRampPalette(c(white, green))
data(mtcars)
df <- with(mtcars, data.frame(mpg, cyl, disp, hp, wt, gear))
cor_matrix <- round(cor(df, use = "pairwise.complete.obs", method = "spearman"), digits = 2)
cor_dat <- melt(cor_matrix)
cor_dat <- data.frame(cor_dat)
levels(cor_dat$Var1) <- list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear")
levels(cor_dat$Var2) <- rev(list("Miles per Gallon" = "mpg", "# of Cylinders" = "cyl",
"Displacement" = "disp", "Horsepower" = "hp", "Weight" = "wt", "# of Gears" = "gear"))
theme_set(theme_solarized())
ggplot(cor_dat, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "#073642", size = 4) +
scale_fill_gradient(name=expression("Spearman" * ~ rho), low = "#fdf6e3", high = "steelblue",
breaks=seq(0, 1, by = 0.2), limits = c(0.3, 1)) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
scale_fill_gradient2(low=RtoWrange(100), mid=WtoGrange(100), high="gray")
```
ggplot(cor_dat, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "#073642", size = 4) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
scale_fill_gradient2(low=RtoWrange(100), mid=WtoGrange(100), high="gray")
ggplot(cor_dat, aes(Var1, Var2, fill = value)) +
geom_tile() +
geom_text(aes(Var1, Var2, label = value), color = "#073642", size = 4) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "", y = "") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.9, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1, title.position = "top",
title.hjust = 0.5)) +
scale_fill_gradient2(low=RtoWrange(100), mid=WtoGrange(100), high="gray") +
theme(legend.position="top")
fit_a <-lm(mpg ~ am, data = mtcars)
fit_b <-lm(mpg ~ am + wt, data = mtcars)
fit_c <-lm(mpg ~ am + wt + hp, data = mtcars)
var_table <- anova(fit_a, fit_b, fit_c)
var_table
summary(fit_a)$coefficients[1:2,]
summary(fit_c)$coefficients[1:2,]
c(summary(fit_a)$r.squared, summary(fit_c)$r.squared)
cat(summary(fit_a)$r.squared, summary(fit_c)$r.squared)
cat("r squared for simple regression model a", summary(fit_a)$r.squared, "r squared for multiple regression model c", summary(fit_c)$r.squared)
cat("r squared for simple regression model a :", summary(fit_a)$r.squared, "," , "r squared for multiple regression model c :", summary(fit_c)$r.squared)
summary(fit_c)$coefficients[1:2,]
fit_a <-lm(mpg ~ am, data = mtcars)
fit_b <-lm(mpg ~ am + wt + hp, data = mtcars)
fit_c <-lm(mpg ~ am + wt + hp + cyl + disp, data = mtcars)
var_table <- anova(fit_a, fit_b, fit_c)
var_table
cat("r squared for simple regression model a :", summary(fit_a)$r.squared)
cat("r squared for multiple regression model c :", summary(fit_c)$r.squared)
cat("r squared for simple regression model a :", summary(fit_a)$r.squared)
cat("r squared for multiple regression model c :", summary(fit_c)$r.squared)
summary <- summary(fit_b)
intercept <- summary$coef[1]
slope <- summary$coef[2]
sigma <- summary$sigma
rsquared <- summary$r.squared
pvalue <- summary$coef[2,4]
summary$coef
cat("r squared for multiple regression model c :", summary(fit_c)$r.squared)
cat("r squared for simple regression model a :", summary(fit_a)$r.squared)
cat("r squared for multiple regression model c :", summary(fit_b)$r.squared)
summary <- summary(fit_b)
intercept <- summary$coef[1]
slope <- summary$coef[2]
sigma <- summary$sigma
rsquared <- summary$r.squared
pvalue <- summary$coef[2,4]
summary$coef
cat("r squared for multiple regression model c :", summary(fit_b)$r.squared)
mtcars
var_table
summary$coef
summary <- summary(fit_b)
summary
model <- lm(mpg ~ factor(am):wt + factor(am):hp, data = mtcars)
summary(model)
?mtcars
summary <- summary(fit_a)
summary
summary(model)
summary <- summary(fit_b)
summary
summary(model)
summary <- summary(fit_b)
summary
summary$coef
plot(fit_b)
library(MASS)
summary(shuttle)
dim(shuttle)
summary(shuttle)
shuttle$use_b <- as.numeric(shuttle$use=="auto")
View(shuttle)
fit <- glm(use_b, as.factor(wind) - 1, data=shuttle, family="binomial")
shuttle$use_b <- as.numeric(shuttle$use=="auto")
fit <- glm(use_b, as.factor(wind) - 1, data=shuttle, family="binomial")
View(shuttle)
fit <- glm(use_b ~ as.factor(wind) - 1, data=shuttle, family="binomial")
fit
odds <- exp(summary(fit)$coef)
odds
odds[1]/odds[2]
fit <- glm(use_b ~as.factor(wind)+factor(magn)-1, data=shuttle, family="binomial")
fit
summary(fit)$coef
exp(coef(fit))
?confint
odds[1]/odds[2]
confint(fit)
fit_2 <- glm(I(1- use_b) ~ as.factor(wind) -1, data=shuttle, family="binomial")
summary(fit2)$coef
summary(fit_2)$coef
summary(fit)$coef
library(MASS)
dim(shuttle)
summary(shuttle)
shuttle$use_b <- as.numeric(shuttle$use=="auto")
fit_1 <- glm(use_b ~ as.factor(wind) - 1, data=shuttle, family="binomial")
odds <- exp(summary(fit_1)$coef)
odds[1]/odds[2]
fit_2 <- glm(use_b ~as.factor(wind)+factor(magn)-1, data=shuttle, family="binomial")
summary(fit_2)$coef
exp(coef(fit_2))
odds <- exp(cbind(odds_ratio=coef(fit_2), confint(fit_2)))
odds[1]/odds[2]
fit_3 <- glm(I(1- use_b) ~ as.factor(wind) -1, data=shuttle, family="binomial")
summary(fit_3)$coef
summary(fit_1)$coef
?InsectSprays
?glm
?InsectSprays
fit_4 <- glm(count ~ spray - 1, data=InsectSprays, family="poisson")
summary(fit_4)$coef
rate <- exp(coef(fit_4))
rate[1]/rate[2]
fit_5a <- glm(count ~ as.factor(spray) + offset(log(count+1)), data=InsectSprays, family="poisson")
fit_5b <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)), data=InsectSprays, family="poisson")
summary(fit_5a)$coef
summary(fit_5b)$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot_point <- c(0)
spline <- sapply(knot_point, function(knot) (x>knot)*(x-knot))
matrix <- cbind(1,x,spline)
fit_6 <- lm(y ~ matrix - 1)
yay <- predict(fit_6)
yay
slope <- fit_6$coef[2] + fit_6$coef[3]
slope
plot(x,y)
lines(x, yay, col=2)
library(RColorBrewer)
summary(mtcars)
library(dplyr)
q <- filter(mtcars, mpg>=30, hp>60)
q
View(q)
?mtcars
View(mtcars)
?filer
?filter
cars$name <- row.names(mtcars)
q <- mtcars; q$name <- row.names(mtcars)
q
filter(q, mpg>=30, hp<60)
filter(q, mpg>=30 | hp<60)
library(swirl)
swirl()
cor(gpa_nor, ghc_nor)
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor ~ ghc_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)/n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <-
m
sTot <- sum(galton$child - mean(galton$child))
sTot <- sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-(sRes/sTot)
(1-sRes/sTot)
1-sRes/sTot
fit
summary(fit)$r.squared
sqrt(cor(child, parents))
sqrt(cor(child, parent))
sqrt(cor(galton$child, galton$parent))
cor(galton$parent, galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate(Girth, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
setwd("C:/Users/Ajusdado/Desktop/PML")
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train_csv <- ".data/pml-training.csv"
test_csv <- ".data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(train_csv)) {
download.file(train_url, destfile=train_csv)
}
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(train_csv)) {
download.file(train_url, destfile=train_csv)
}
setwd("C:/Users/Ajusdado/Desktop/PML")
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train_csv <- ".data/pml-training.csv"
test_csv <- ".data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(train_csv)) {
download.file(train_url, destfile=train_csv)
}
?file.exists
setwd("C:/Users/Ajusdado/Desktop/PML")
train_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
test_url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
train_csv <- "./data/pml-training.csv"
test_csv <- "./data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(train_csv)) {
download.file(train_url, destfile=train_csv)
}
if (!file.exists(test_csv)) {
downliad.file(test_url, destfile=test_csv)
}
if (!file.exists(test_csv)) {
download.file(test_url, destfile=test_csv)
}
library(dplyr)
train_df <- tbl(read.csv("./data/pml-training.csv", na.strings=c("NA", "")))
?tbl
train_df <- read.csv("./data/pml-training.csv", na.strings=c("NA", ""))
test_df <- read.csv("./data/pml-testing.csv", na.strings=c("NA", ""))
View(test_df)
train_df <- tbl(train_df)
?as.tbl
train_df <- as.tbl(train_df)
test_df <- as.tbl(test_df)
str(test_df)
install.packages("Rcpp")
install.packages("Amelia")
